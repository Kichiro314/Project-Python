import pygame, sys

from pygame.math import Vector2

clock = pygame.time.Clock()

from pygame.locals import *
pygame.init() # initiates pygame

pygame.display.set_caption('Platformer Naruto way to Konoha')

WINDOW_SIZE = (900,600)

screen = pygame.display.set_mode(WINDOW_SIZE,0,32) # initiate the window

display = pygame.Surface((300,200)) # used as the surface for rendering, which is scaled

AURA_COLOR = (255, 0, 0)

AURA_RADIUS = 10

AURA_SPEED = 5

moving_right = False
moving_left = False
vertical_momentum = 0
air_timer = 0

grass_img = pygame.image.load('grass.png')
dirt_img = pygame.image.load('dirt.png')

oldgrass_img = pygame.image.load('oldgrass.png')
olddirt_img = pygame.image.load('olddirt.png')

newgrass_img = pygame.image.load('newgrass.png')
newdirt_img = pygame.image.load('newdirt.png')

player_img = pygame.image.load('player.png')
player_img.set_colorkey((255,255,255))
                        
pygame.display.update()

map1 = []

current_map = []

player_movement = [0,0]

def load_map(path):
    f = open(path + '.txt','r')
    data = f.read()
    f.close()
    data = data.split('\n')
    game_map = []
    for row in data:
        game_map.append(list(row))
    return game_map

map1 = load_map('map')

def load_map(path):
    f = open(path + '.txt','r')
    data = f.read()
    f.close()
    data = data.split('\n')
    game_map = []
    for row in data:
        game_map.append(list(row))
    return game_map

oldmap = load_map('oldmap')


def load_map(path):
    f = open(path + '.txt','r')
    data = f.read()
    f.close()
    data = data.split('\n')
    game_map = []
    for row in data:
        game_map.append(list(row))
    return game_map

newmap = load_map('newmap')




def create_map():
    with open('map.txt', 'r') as f1:
        map1 = f1.read().splitlines()
    with open('oldmap.txt', 'r') as f2:
        oldmap = f2.read().splitlines()
    with open('newmap.txt', 'r') as f3:
        newmap = f3.read().splitlines()
    current_map = map1


class Aura:
    def __init__(self, player_movement):
        self.pos = Vector2(player_movement)
        self.radius = AURA_RADIUS
        self.color = AURA_COLOR

    def draw(self, surface):
        pygame.draw.circle(surface, self.color, self.pos, self.radius)

def update_aura(aura, player_movement):
    target_pos = Vector2(player_movement)
    direction = target_pos - aura.pos
    if direction.length() > AURA_SPEED:
        direction.scale_to_length(AURA_SPEED)
    aura.pos += direction



current_map = map1


true_scroll = [0,0]


player_rect = pygame.Rect(100,100,5,13)

       
background_objects = [[0.25,[120,10,70,400]],[0.25,[280,30,40,400]],[0.5,[30,40,40,400]],[0.5,[130,90,100,400]],[0.5,[300,80,120,400]]]

def collision_test(rect,tiles):
    hit_list = []
    for tile in tiles:
        if rect.colliderect(tile):
            hit_list.append(tile)
    return hit_list

def move(rect,movement,tiles):
    collision_types = {'top':False,'bottom':False,'right':False,'left':False}
    rect.x += movement[0]
    hit_list = collision_test(rect,tiles)
    for tile in hit_list:
        if movement[0] > 0:
            rect.right = tile.left
            collision_types['right'] = True
        elif movement[0] < 0:
            rect.left = tile.right
            collision_types['left'] = True
    rect.y += movement[1]
    hit_list = collision_test(rect,tiles)
    for tile in hit_list:
        if movement[1] > 0:
            rect.bottom = tile.top
            collision_types['bottom'] = True
        elif movement[1] < 0:
            rect.top = tile.bottom
            collision_types['top'] = True
    return rect, collision_types

aura = Aura(player_movement)

while True: # game loop
    display.fill((146,244,255)) # clear screen by filling it with blue

    true_scroll[0] += (player_rect.x-true_scroll[0]-152)/20
    true_scroll[1] += (player_rect.y-true_scroll[1]-106)/20
    scroll = true_scroll.copy()
    scroll[0] = int(scroll[0])
    scroll[1] = int(scroll[1])

    pygame.draw.rect(display,(7,80,75),pygame.Rect(0,120,300,80))
    for background_object in background_objects:
        obj_rect = pygame.Rect(background_object[1][0]-scroll[0]*background_object[0],background_object[1][1]-scroll[1]*background_object[0],background_object[1][2],background_object[1][3])
        if background_object[0] == 0.5:
            pygame.draw.rect(display,(14,222,150),obj_rect)
        else:
            pygame.draw.rect(display,(9,91,85),obj_rect)

    tile_rects = []
    y = 0
    for layer in current_map:
        x = 0
        for tile in layer:
            if tile == '1':
                display.blit(dirt_img,(x*16-scroll[0],y*16-scroll[1]))
            if tile == '2':
                display.blit(grass_img,(x*16-scroll[0],y*16-scroll[1]))
            if tile == '3':
                display.blit(olddirt_img,(x*16-scroll[0],y*16-scroll[1]))
            if tile == '4':
                display.blit(oldgrass_img,(x*16-scroll[0],y*16-scroll[1]))
            if tile == '5':
                display.blit(newdirt_img,(x*16-scroll[0],y*16-scroll[1]))
            if tile == '6':
                display.blit(newgrass_img,(x*16-scroll[0],y*16-scroll[1]))
            if tile != '0':
                tile_rects.append(pygame.Rect(x*15.9,y*15,18,18))
            x += 1
        y += 1


    update_aura(aura, player_movement)
    aura.draw(screen)

    player_movement = [0,0]
    if moving_right == True:
        player_movement[0] += 2
    if moving_left == True:
        player_movement[0] -= 2
    player_movement[1] += vertical_momentum
    vertical_momentum += 0.2
    if vertical_momentum > 3:
        vertical_momentum = 3

    player_rect,collisions = move(player_rect,player_movement,tile_rects)

    if collisions['bottom'] == True:
        air_timer = 0
        vertical_momentum = 0
    else:
        air_timer += 1

    display.blit(player_img,(player_rect.x-scroll[0],player_rect.y-scroll[1]))


    for event in pygame.event.get(): # event loop
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        if event.type == KEYDOWN:
            if event.key == K_RIGHT:
                moving_right = True
            if event.key == K_LEFT:
                moving_left = True
            if event.key == K_z:
                current_map = oldmap
            if event.key == K_x:
                current_map = map1
            if event.key == K_c:
                current_map = newmap
            if event.key == K_UP:
                if air_timer < 6:
                    vertical_momentum = -5
        if event.type == KEYUP:
            if event.key == K_RIGHT:
                moving_right = False
            if event.key == K_LEFT:
                moving_left = False
        
    screen.blit(pygame.transform.scale(display,WINDOW_SIZE),(0,0))
    pygame.display.update()
    clock.tick(60)
